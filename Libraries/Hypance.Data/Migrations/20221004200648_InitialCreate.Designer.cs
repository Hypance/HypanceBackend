// <auto-generated />
using System;
using Hypance.Data.DataProviders;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hypance.Data.Migrations
{
    [DbContext(typeof(HypanceDbContext))]
    [Migration("20221004200648_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hypance.Core.Domain.Backtests.Backtest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int[]>("Market")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int[]>("OrderTypes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int[]>("Positiontypes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("TrendStrategy")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Backtests");
                });

            modelBuilder.Entity("Hypance.Core.Domain.Bots.Bot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int[]>("Markets")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int[]>("OrderTypes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int[]>("PositionTypes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<decimal>("PriceVolume")
                        .HasColumnType("numeric");

                    b.Property<int>("TrendStrategies")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Bots");
                });

            modelBuilder.Entity("Hypance.Core.Domain.Formations.Formation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BacktestId")
                        .HasColumnType("integer");

                    b.Property<int?>("BotId")
                        .HasColumnType("integer");

                    b.Property<int>("Interval")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("NotificationId")
                        .HasColumnType("integer");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<int[]>("SignalResults")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("BacktestId");

                    b.HasIndex("BotId");

                    b.HasIndex("NotificationId");

                    b.ToTable("Formations");
                });

            modelBuilder.Entity("Hypance.Core.Domain.Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int[]>("Markets")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int[]>("MessageChannels")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int[]>("OrderTypes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int[]>("PositionTypes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("TrendStrategy")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Hypance.Core.Domain.Strategies.Indicator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DefaultPeriod")
                        .HasColumnType("integer");

                    b.Property<int?>("FormationId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SignalId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FormationId");

                    b.HasIndex("SignalId");

                    b.ToTable("Indicators");
                });

            modelBuilder.Entity("Hypance.Core.Domain.Strategies.Signal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Interval")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<int[]>("SignalResults")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int?>("StrategyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId");

                    b.ToTable("Signals");
                });

            modelBuilder.Entity("Hypance.Core.Domain.Strategies.Strategy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BacktestId")
                        .HasColumnType("integer");

                    b.Property<int?>("BotId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("NotificationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BacktestId");

                    b.HasIndex("BotId");

                    b.HasIndex("NotificationId");

                    b.ToTable("Strategies");
                });

            modelBuilder.Entity("Hypance.Core.Domain.Symbols.Symbol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BacktestId")
                        .HasColumnType("integer");

                    b.Property<int?>("BotId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MaxQuantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinQuantity")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("NotificationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BacktestId");

                    b.HasIndex("BotId");

                    b.HasIndex("NotificationId");

                    b.ToTable("Symbols");
                });

            modelBuilder.Entity("Hypance.Core.Domain.Formations.Formation", b =>
                {
                    b.HasOne("Hypance.Core.Domain.Backtests.Backtest", null)
                        .WithMany("Formation")
                        .HasForeignKey("BacktestId");

                    b.HasOne("Hypance.Core.Domain.Bots.Bot", null)
                        .WithMany("Formation")
                        .HasForeignKey("BotId");

                    b.HasOne("Hypance.Core.Domain.Notifications.Notification", null)
                        .WithMany("Formation")
                        .HasForeignKey("NotificationId");
                });

            modelBuilder.Entity("Hypance.Core.Domain.Strategies.Indicator", b =>
                {
                    b.HasOne("Hypance.Core.Domain.Formations.Formation", null)
                        .WithMany("Indicators")
                        .HasForeignKey("FormationId");

                    b.HasOne("Hypance.Core.Domain.Strategies.Signal", null)
                        .WithMany("Indicators")
                        .HasForeignKey("SignalId");
                });

            modelBuilder.Entity("Hypance.Core.Domain.Strategies.Signal", b =>
                {
                    b.HasOne("Hypance.Core.Domain.Strategies.Strategy", null)
                        .WithMany("Signal")
                        .HasForeignKey("StrategyId");
                });

            modelBuilder.Entity("Hypance.Core.Domain.Strategies.Strategy", b =>
                {
                    b.HasOne("Hypance.Core.Domain.Backtests.Backtest", null)
                        .WithMany("Strategy")
                        .HasForeignKey("BacktestId");

                    b.HasOne("Hypance.Core.Domain.Bots.Bot", null)
                        .WithMany("Strategy")
                        .HasForeignKey("BotId");

                    b.HasOne("Hypance.Core.Domain.Notifications.Notification", null)
                        .WithMany("Strategy")
                        .HasForeignKey("NotificationId");
                });

            modelBuilder.Entity("Hypance.Core.Domain.Symbols.Symbol", b =>
                {
                    b.HasOne("Hypance.Core.Domain.Backtests.Backtest", null)
                        .WithMany("Symbols")
                        .HasForeignKey("BacktestId");

                    b.HasOne("Hypance.Core.Domain.Bots.Bot", null)
                        .WithMany("Symbols")
                        .HasForeignKey("BotId");

                    b.HasOne("Hypance.Core.Domain.Notifications.Notification", null)
                        .WithMany("Symbols")
                        .HasForeignKey("NotificationId");
                });

            modelBuilder.Entity("Hypance.Core.Domain.Backtests.Backtest", b =>
                {
                    b.Navigation("Formation");

                    b.Navigation("Strategy");

                    b.Navigation("Symbols");
                });

            modelBuilder.Entity("Hypance.Core.Domain.Bots.Bot", b =>
                {
                    b.Navigation("Formation");

                    b.Navigation("Strategy");

                    b.Navigation("Symbols");
                });

            modelBuilder.Entity("Hypance.Core.Domain.Formations.Formation", b =>
                {
                    b.Navigation("Indicators");
                });

            modelBuilder.Entity("Hypance.Core.Domain.Notifications.Notification", b =>
                {
                    b.Navigation("Formation");

                    b.Navigation("Strategy");

                    b.Navigation("Symbols");
                });

            modelBuilder.Entity("Hypance.Core.Domain.Strategies.Signal", b =>
                {
                    b.Navigation("Indicators");
                });

            modelBuilder.Entity("Hypance.Core.Domain.Strategies.Strategy", b =>
                {
                    b.Navigation("Signal");
                });
#pragma warning restore 612, 618
        }
    }
}
